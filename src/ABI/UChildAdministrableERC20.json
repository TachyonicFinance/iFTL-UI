{
  "address": "0x26601611C44Ed97ED3d2D6de6e73Fa5b1fed32cF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRescuer",
          "type": "address"
        }
      ],
      "name": "RescuerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BLACKLISTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CANCEL_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "META_TRANSACTION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESCUER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "approveWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "authorizationState",
      "outputs": [
        {
          "internalType": "enum GasAbstraction.AuthorizationState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blacklisters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decrement",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "decreaseAllowanceWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "increment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "increaseAllowanceWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "newDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "childChainManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescuers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "transferWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "unBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newSymbol",
          "type": "string"
        }
      ],
      "name": "updateMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "withdrawWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d0c5041a627c5dcf6c24fcf0484f20cfedc2c85f9b531735eb47c13ec0588e6",
  "receipt": {
    "to": null,
    "from": "0x6DBe275d4008000b39E12AD374a59AeC31CF5274",
    "contractAddress": "0x26601611C44Ed97ED3d2D6de6e73Fa5b1fed32cF",
    "transactionIndex": 0,
    "gasUsed": "4336895",
    "logsBloom": "0x
    "blockHash": "0x0bc272d9f5734dd63e433b131b09a292a1bd58195bac0d171801077058cd445a",
    "transactionHash": "0x4d0c5041a627c5dcf6c24fcf0484f20cfedc2c85f9b531735eb47c13ec0588e6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14687412,
        "transactionHash": "0x4d0c5041a627c5dcf6c24fcf0484f20cfedc2c85f9b531735eb47c13ec0588e6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006dbe275d4008000b39e12ad374a59aec31cf5274",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000013427a916103800000000000000000000000000000000000000000000000000019ca0fd420b580000000000000000000000000000000000000000000000007bee5167db51d3d936000000000000000000000000000000000000000000000000006879542bfb200000000000000000000000000000000000000000000000007bef858f8467e41136",
        "logIndex": 0,
        "blockHash": "0x0bc272d9f5734dd63e433b131b09a292a1bd58195bac0d171801077058cd445a"
      }
    ],
    "blockNumber": 14687412,
    "cumulativeGasUsed": "4336895",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "15605fe2713d85483f18fe0189b7a2e8",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"RescuerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BLACKLISTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"META_TRANSACTION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESCUER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"approveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"enum GasAbstraction.AuthorizationState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklisters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"decreaseAllowanceWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"increaseAllowanceWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"newDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"childChainManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"updateMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount of allowance\"}},\"authorizationState(address,bytes32)\":{\"params\":{\"authorizer\":\"Authorizer's address\",\"nonce\":\"Nonce of the authorization\"},\"returns\":{\"_0\":\"Authorization state\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"blacklist(address)\":{\"details\":\"Adds an account to the blacklist\",\"params\":{\"account\":\"The address to blacklist\"}},\"blacklisters()\":{\"returns\":{\"_0\":\"Addresses\"}},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Works only if the authorization is not yet used.\",\"params\":{\"authorizer\":\"Authorizer's address\",\"nonce\":\"Nonce of the authorization\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"v\":\"v of the signature\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"decrement\":\"Amount of decrease in allowance\",\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\"}},\"deposit(address,bytes)\":{\"details\":\"Should be callable only by ChildChainManager Should handle deposit by minting the required amount for user Make sure minting is done only by this function\",\"params\":{\"depositData\":\"abi encoded amount\",\"user\":\"user address for whom deposit is being done\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"increment\":\"Amount of increase in allowance\",\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\"}},\"initialize(string,string,uint8,address)\":{\"details\":\"meant to be called once immediately after deployment\"},\"isBlacklisted(address)\":{\"details\":\"Checks if an account is blacklisted\",\"params\":{\"account\":\"The address to check\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"params\":{\"owner\":\"Token owner's address\"},\"returns\":{\"_0\":\"Next nonce\"}},\"paused()\":{\"returns\":{\"_0\":\"True if paused\"}},\"pausers()\":{\"returns\":{\"_0\":\"Addresses\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"Expiration time, seconds since the epoch\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"value\":\"Amount of allowance\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"rescueERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Recipient address\",\"tokenContract\":\"ERC20 token contract address\"}},\"rescuers()\":{\"returns\":{\"_0\":\"Addresses\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"to\":\"Payee's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"unBlacklist(address)\":{\"params\":{\"account\":\"The address to remove from the blacklist\"}},\"withdraw(uint256)\":{\"details\":\"Should burn user's tokens. This transaction will be verified when exiting on root chain\",\"params\":{\"amount\":\"amount of tokens to withdraw\"}},\"withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"nonce\":\"Unique nonce\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Update allowance with a signed authorization\"},\"authorizationState(address,bytes32)\":{\"notice\":\"Returns the state of an authorization\"},\"blacklisters()\":{\"notice\":\"Return the members of the blacklister role\"},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Attempt to cancel an authorization\"},\"decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Decrease allowance with a signed authorization\"},\"deposit(address,bytes)\":{\"notice\":\"called when token is deposited on root chain\"},\"increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Increase allowance with a signed authorization\"},\"initialize(string,string,uint8,address)\":{\"notice\":\"Initialize the contract after it has been proxified\"},\"nonces(address)\":{\"notice\":\"Nonces for permit / meta-transactions\"},\"pause()\":{\"notice\":\"Pause this contract\"},\"paused()\":{\"notice\":\"Returns whether this contract is paused\"},\"pausers()\":{\"notice\":\"Return the members of the pauser role\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Update allowance with a signed permit\"},\"rescueERC20(address,address,uint256)\":{\"notice\":\"Rescue ERC20 tokens locked up in this contract.\"},\"rescuers()\":{\"notice\":\"Return the members of the rescuer role\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Execute a transfer with a signed authorization\"},\"unBlacklist(address)\":{\"notice\":\"Removes an account from the blacklist\"},\"unpause()\":{\"notice\":\"Unpause this contract\"},\"withdraw(uint256)\":{\"notice\":\"called when user wants to withdraw tokens back to root chain\"},\"withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Execute a withdrawal with a signed authorization. This is used to transfer tokens back to the root chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UChildAdministrableERC20.sol\":\"UChildAdministrableERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UChildAdministrableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// File: @openzeppelin/contracts/GSN/Context.sol\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal virtual view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal virtual view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Address.sol\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{\\n            value: weiValue\\n        }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: contracts/lib/IERC20Internal.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract IERC20Internal {\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 increment\\n    ) internal virtual;\\n\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 decrement\\n    ) internal virtual;\\n\\n    function _mint(address account, uint256 amount) internal virtual;\\n\\n    function _burn(address account, uint256 amount) internal virtual;\\n}\\n\\n// File: contracts/lib/ERC20.sol\\n\\n/**\\n * Copyright (c) 2016-2020 zOS Global Limited\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining\\n * a copy of this software and associated documentation files (the\\n * \\\"Software\\\"), to deal in the Software without restriction, including\\n * without limitation the rights to use, copy, modify, merge, publish,\\n * distribute, sublicense, and/or sell copies of the Software, and to\\n * permit persons to whom the Software is furnished to do so, subject to\\n * the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included\\n * in all copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev openzeppelin Implementation of the {IERC20} interface.\\n *\\n * Modified to add setters for name, symbol and decimals. This was needed\\n * because\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n *\\n * Modifications made:\\n * - Setters for name, symbol, and decimals\\n * - Internal _transferFrom, _increaseAllowance, and _decreaseAllowance\\n * - Conform to IERC20Internal interface\\n * - Changed visibility of public functions to external\\n */\\ncontract ERC20 is Context, IERC20, IERC20Internal {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        external\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        virtual\\n        override\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n    }\\n\\n    function _increaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 addedValue\\n    ) internal virtual override {\\n        _approve(owner, spender, _allowances[owner][spender].add(addedValue));\\n    }\\n\\n    function _decreaseAllowance(\\n        address owner,\\n        address spender,\\n        uint256 subtractedValue\\n    ) internal virtual override {\\n        _approve(\\n            owner,\\n            spender,\\n            _allowances[owner][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/AccessControl.sol\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, _msgSender()),\\n            \\\"AccessControl: sender must be an admin to grant\\\"\\n        );\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(\\n            hasRole(_roles[role].adminRole, _msgSender()),\\n            \\\"AccessControl: sender must be an admin to revoke\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(\\n            account == _msgSender(),\\n            \\\"AccessControl: can only renounce roles for self\\\"\\n        );\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\\n// File: contracts/lib/AccessControlMixin.sol\\n\\npragma solidity 0.6.12;\\n\\ncontract AccessControlMixin is AccessControl {\\n    string private _revertMsg;\\n\\n    function _setupContractId(string memory contractId) internal {\\n        _revertMsg = string(\\n            abi.encodePacked(contractId, \\\": INSUFFICIENT_PERMISSIONS\\\")\\n        );\\n    }\\n\\n    modifier only(bytes32 role) {\\n        require(hasRole(role, _msgSender()), _revertMsg);\\n        _;\\n    }\\n}\\n\\n// File: contracts/lib/IChildToken.sol\\n\\npragma solidity 0.6.12;\\n\\ninterface IChildToken {\\n    function deposit(address user, bytes calldata depositData) external;\\n}\\n\\n// File: contracts/lib/Initializable.sol\\n\\npragma solidity 0.6.12;\\n\\ncontract Initializable {\\n    bool private _initialized = false;\\n\\n    modifier initializer() {\\n        // solhint-disable-next-line reason-string\\n        require(!_initialized);\\n        _;\\n        _initialized = true;\\n    }\\n\\n    function initialized() external view returns (bool) {\\n        return _initialized;\\n    }\\n}\\n\\n// File: contracts/lib/ECRecover.sol\\n\\n/**\\n * Copyright (c) 2016-2019 zOS Global Limited\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title ECRecover\\n * @notice A library that provides a safe ECDSA recovery function\\n */\\nlibrary ECRecover {\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\\n     * Modifications: Accept v, r, and s as separate arguments\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     * @return Signer address\\n     */\\n    function recover(\\n        bytes32 digest,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            revert(\\\"ECRecover: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECRecover: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(digest, v, r, s);\\n        require(signer != address(0), \\\"ECRecover: invalid signature\\\");\\n\\n        return signer;\\n    }\\n}\\n\\n// File: contracts/lib/EIP712.sol\\n\\n/**\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title EIP712\\n * @notice A library that provides EIP712 helper functions\\n */\\nlibrary EIP712 {\\n    // keccak256(\\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\")\\n    bytes32\\n        public constant EIP712_DOMAIN_TYPEHASH = 0x36c25de3e541d5d970f66e4210d728721220fff5c077cc6cd008b3a0c62adab7;\\n\\n    /**\\n     * @notice Make EIP712 domain separator\\n     * @param name      Contract name\\n     * @param version   Contract version\\n     * @return Domain separator\\n     */\\n    function makeDomainSeparator(string memory name, string memory version)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712_DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(version)),\\n                    address(this),\\n                    bytes32(chainId)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Recover signer's address from a EIP712 signature\\n     * @param domainSeparator   Domain separator\\n     * @param v                 v of the signature\\n     * @param r                 r of the signature\\n     * @param s                 s of the signature\\n     * @param typeHashAndData   Type hash concatenated with data\\n     * @return Signer's address\\n     */\\n    function recover(\\n        bytes32 domainSeparator,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes memory typeHashAndData\\n    ) internal pure returns (address) {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(typeHashAndData)\\n            )\\n        );\\n        return ECRecover.recover(digest, v, r, s);\\n    }\\n}\\n\\n// File: contracts/lib/EIP712Domain.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract EIP712Domain {\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    function _setDomainSeparator(string memory name, string memory version)\\n        internal\\n    {\\n        DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(name, version);\\n    }\\n}\\n\\n// File: contracts/lib/Nonces.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract Nonces {\\n    mapping(address => uint256) internal _nonces;\\n\\n    /**\\n     * @notice Nonces for permit / meta-transactions\\n     * @param owner Token owner's address\\n     * @return Next nonce\\n     */\\n    function nonces(address owner) external view returns (uint256) {\\n        return _nonces[owner];\\n    }\\n}\\n\\n// File: contracts/lib/NativeMetaTransaction.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract NativeMetaTransaction is EIP712Domain, Nonces {\\n    // keccak256(\\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\")\\n    bytes32\\n        public constant META_TRANSACTION_TYPEHASH = 0x23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e653;\\n\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) external payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: _nonces[userAddress]++,\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            _verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            msg.sender,\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function _verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n\\n        bytes memory data = abi.encode(\\n            META_TRANSACTION_TYPEHASH,\\n            metaTx.nonce,\\n            metaTx.from,\\n            keccak256(metaTx.functionSignature)\\n        );\\n\\n        return\\n            EIP712.recover(DOMAIN_SEPARATOR, sigV, sigR, sigS, data) == signer;\\n    }\\n}\\n\\n// File: contracts/lib/ContextMixin.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract ContextMixin {\\n    function msgSender() internal view returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n        return sender;\\n    }\\n}\\n\\n// File: contracts/lib/Permit.sol\\n\\n/**\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\nabstract contract Permit is IERC20Internal, EIP712Domain, Nonces {\\n    // = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n    bytes32\\n        public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /**\\n     * @notice Verify a signed approval permit and execute if valid\\n     * @param owner     Token owner's address (Authorizer)\\n     * @param spender   Spender's address\\n     * @param value     Amount of allowance\\n     * @param deadline  The time at which this expires (unix time)\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     */\\n    function _permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        require(msg.sender != address(this), \\\"Caller is this contract\\\");\\n        require(deadline >= now, \\\"Permit: permit is expired\\\");\\n\\n        bytes memory data = abi.encode(\\n            PERMIT_TYPEHASH,\\n            owner,\\n            spender,\\n            value,\\n            _nonces[owner]++,\\n            deadline\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"Permit: invalid signature\\\"\\n        );\\n\\n        _approve(owner, spender, value);\\n    }\\n}\\n\\n// File: contracts/lib/GasAbstraction.sol\\n\\n/**\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\n/**\\n * @title Gas Abstraction\\n * @notice Provide internal implementation for gas-abstracted transfers and\\n * approvals\\n * @dev Contracts that inherit from this must wrap these with publicly\\n * accessible functions, optionally adding modifiers where necessary\\n */\\nabstract contract GasAbstraction is IERC20Internal, EIP712Domain {\\n    bytes32\\n        public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n    // = keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant APPROVE_WITH_AUTHORIZATION_TYPEHASH = 0x808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c;\\n    // = keccak256(\\\"ApproveWithAuthorization(address owner,address spender,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH = 0x424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a;\\n    // = keccak256(\\\"IncreaseAllowanceWithAuthorization(address owner,address spender,uint256 increment,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH = 0xb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d8;\\n    // = keccak256(\\\"DecreaseAllowanceWithAuthorization(address owner,address spender,uint256 decrement,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\\n    // = keccak256(\\\"CancelAuthorization(address authorizer,bytes32 nonce)\\\")\\n\\n    enum AuthorizationState { Unused, Used, Canceled }\\n\\n    /**\\n     * @dev authorizer address => nonce => authorization state\\n     */\\n    mapping(address => mapping(bytes32 => AuthorizationState))\\n        private _authorizationStates;\\n\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n    event AuthorizationCanceled(\\n        address indexed authorizer,\\n        bytes32 indexed nonce\\n    );\\n\\n    /**\\n     * @notice Returns the state of an authorization\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @return Authorization state\\n     */\\n    function authorizationState(address authorizer, bytes32 nonce)\\n        external\\n        view\\n        returns (AuthorizationState)\\n    {\\n        return _authorizationStates[authorizer][nonce];\\n    }\\n\\n    /**\\n     * @notice Verify a signed transfer authorization and execute if valid\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            TRANSFER_WITH_AUTHORIZATION_TYPEHASH,\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == from,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(from, nonce);\\n        _transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Verify a signed authorization for an increase in the allowance\\n     * granted to the spender and execute if valid\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param increment     Amount of increase in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _increaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 increment,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            spender,\\n            increment,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _increaseAllowance(owner, spender, increment);\\n    }\\n\\n    /**\\n     * @notice Verify a signed authorization for a decrease in the allowance\\n     * granted to the spender and execute if valid\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param decrement     Amount of decrease in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _decreaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 decrement,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            spender,\\n            decrement,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _decreaseAllowance(owner, spender, decrement);\\n    }\\n\\n    /**\\n     * @notice Verify a signed approval authorization and execute if valid\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param value         Amount of allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _approveWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            APPROVE_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            spender,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireUnusedAuthorization(authorizer, nonce);\\n\\n        bytes memory data = abi.encode(\\n            CANCEL_AUTHORIZATION_TYPEHASH,\\n            authorizer,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == authorizer,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _authorizationStates[authorizer][nonce] = AuthorizationState.Canceled;\\n        emit AuthorizationCanceled(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Check that an authorization is unused\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _requireUnusedAuthorization(address authorizer, bytes32 nonce)\\n        private\\n        view\\n    {\\n        require(\\n            _authorizationStates[authorizer][nonce] ==\\n                AuthorizationState.Unused,\\n            \\\"GasAbstraction: authorization is used or canceled\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check that authorization is valid\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     */\\n    function _requireValidAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint256 validAfter,\\n        uint256 validBefore\\n    ) internal view {\\n        require(\\n            now > validAfter,\\n            \\\"GasAbstraction: authorization is not yet valid\\\"\\n        );\\n        require(now < validBefore, \\\"GasAbstraction: authorization is expired\\\");\\n        _requireUnusedAuthorization(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Mark an authorization as used\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _markAuthorizationAsUsed(address authorizer, bytes32 nonce)\\n        internal\\n    {\\n        _authorizationStates[authorizer][nonce] = AuthorizationState.Used;\\n        emit AuthorizationUsed(authorizer, nonce);\\n    }\\n}\\n\\n// File: contracts/lib/MaticGasAbstraction.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract MaticGasAbstraction is GasAbstraction {\\n    // keccak256(\\\"WithdrawWithAuthorization(address owner,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32\\n        public constant WITHDRAW_WITH_AUTHORIZATION_TYPEHASH = 0x6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f9;\\n\\n    function _withdrawWithAuthorization(\\n        address owner,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _requireValidAuthorization(owner, nonce, validAfter, validBefore);\\n\\n        bytes memory data = abi.encode(\\n            WITHDRAW_WITH_AUTHORIZATION_TYPEHASH,\\n            owner,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce\\n        );\\n        require(\\n            EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner,\\n            \\\"GasAbstraction: invalid signature\\\"\\n        );\\n\\n        _markAuthorizationAsUsed(owner, nonce);\\n        _burn(owner, value);\\n    }\\n}\\n\\n// File: contracts/UChildERC20.sol\\n\\npragma solidity 0.6.12;\\n\\ncontract UChildERC20 is\\n    ERC20,\\n    IChildToken,\\n    AccessControlMixin,\\n    Initializable,\\n    NativeMetaTransaction,\\n    ContextMixin,\\n    Permit,\\n    MaticGasAbstraction\\n{\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n    string public constant EIP712_VERSION = \\\"1\\\";\\n\\n    constructor() public ERC20(\\\"\\\", \\\"\\\") {}\\n\\n    /**\\n     * @notice Initialize the contract after it has been proxified\\n     * @dev meant to be called once immediately after deployment\\n     */\\n    function initialize(\\n        string calldata newName,\\n        string calldata newSymbol,\\n        uint8 newDecimals,\\n        address childChainManager\\n    ) external initializer {\\n        _setName(newName);\\n        _setSymbol(newSymbol);\\n        _setDecimals(newDecimals);\\n        _setupContractId(string(abi.encodePacked(\\\"Child\\\", newSymbol)));\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _setDomainSeparator(newName, EIP712_VERSION);\\n    }\\n\\n    // This is to support Native meta transactions\\n    // never use msg.sender directly, use _msgSender() instead\\n    function _msgSender()\\n        internal\\n        virtual\\n        override\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    function updateMetadata(string calldata newName, string calldata newSymbol)\\n        external\\n        only(DEFAULT_ADMIN_ROLE)\\n    {\\n        _setName(newName);\\n        _setSymbol(newSymbol);\\n        _setDomainSeparator(newName, EIP712_VERSION);\\n    }\\n\\n    /**\\n     * @notice called when token is deposited on root chain\\n     * @dev Should be callable only by ChildChainManager\\n     * Should handle deposit by minting the required amount for user\\n     * Make sure minting is done only by this function\\n     * @param user user address for whom deposit is being done\\n     * @param depositData abi encoded amount\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        override\\n        only(DEPOSITOR_ROLE)\\n    {\\n        uint256 amount = abi.decode(depositData, (uint256));\\n        _mint(user, amount);\\n    }\\n\\n    /**\\n     * @notice called when user wants to withdraw tokens back to root chain\\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\\n     * @param amount amount of tokens to withdraw\\n     */\\n    function withdraw(uint256 amount) external virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed permit\\n     * @param owner       Token owner's address (Authorizer)\\n     * @param spender     Spender's address\\n     * @param value       Amount of allowance\\n     * @param deadline    Expiration time, seconds since the epoch\\n     * @param v           v of the signature\\n     * @param r           r of the signature\\n     * @param s           s of the signature\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _transferWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed authorization\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param value         Amount of allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function approveWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _approveWithAuthorization(\\n            owner,\\n            spender,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Increase allowance with a signed authorization\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param increment     Amount of increase in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function increaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 increment,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _increaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            increment,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Decrease allowance with a signed authorization\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param spender       Spender's address\\n     * @param decrement     Amount of decrease in allowance\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function decreaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 decrement,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _decreaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            decrement,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Execute a withdrawal with a signed authorization. This is used to\\n     * transfer tokens back to the root chain.\\n     * @param owner         Token owner's address (Authorizer)\\n     * @param value         Amount to be withdrawn\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function withdrawWithAuthorization(\\n        address owner,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _withdrawWithAuthorization(\\n            owner,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev Works only if the authorization is not yet used.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual {\\n        _cancelAuthorization(authorizer, nonce, v, r, s);\\n    }\\n}\\n\\n// File: contracts/lib/Administrable/Blacklistable.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract Blacklistable is AccessControlMixin {\\n    bytes32 public constant BLACKLISTER_ROLE = keccak256(\\\"BLACKLISTER_ROLE\\\");\\n\\n    mapping(address => bool) internal _blacklisted;\\n\\n    event Blacklisted(address indexed account);\\n    event UnBlacklisted(address indexed account);\\n\\n    /**\\n     * @dev Throws if the given account is blacklisted\\n     * @param account The address to check\\n     */\\n    modifier notBlacklisted(address account) {\\n        require(\\n            !_blacklisted[account],\\n            \\\"Blacklistable: account is blacklisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Return the members of the blacklister role\\n     * @return Addresses\\n     */\\n    function blacklisters() external view returns (address[] memory) {\\n        uint256 count = getRoleMemberCount(BLACKLISTER_ROLE);\\n        address[] memory list = new address[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            list[i] = getRoleMember(BLACKLISTER_ROLE, i);\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @dev Checks if an account is blacklisted\\n     * @param account The address to check\\n     */\\n    function isBlacklisted(address account) external view returns (bool) {\\n        return _blacklisted[account];\\n    }\\n\\n    /**\\n     * @dev Adds an account to the blacklist\\n     * @param account The address to blacklist\\n     */\\n    function blacklist(address account) external only(BLACKLISTER_ROLE) {\\n        _blacklisted[account] = true;\\n        emit Blacklisted(account);\\n    }\\n\\n    /**\\n     * @notice Removes an account from the blacklist\\n     * @param account The address to remove from the blacklist\\n     */\\n    function unBlacklist(address account) external only(BLACKLISTER_ROLE) {\\n        _blacklisted[account] = false;\\n        emit UnBlacklisted(account);\\n    }\\n}\\n\\n// File: contracts/lib/Administrable/Pausable.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract Pausable is AccessControlMixin {\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    event Pause();\\n    event Unpause();\\n\\n    bool internal _paused = false;\\n\\n    /**\\n     * @notice Throws if this contract is paused\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Return the members of the pauser role\\n     * @return Addresses\\n     */\\n    function pausers() external view returns (address[] memory) {\\n        uint256 count = getRoleMemberCount(PAUSER_ROLE);\\n        address[] memory list = new address[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            list[i] = getRoleMember(PAUSER_ROLE, i);\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @notice Returns whether this contract is paused\\n     * @return True if paused\\n     */\\n    function paused() external view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @notice Pause this contract\\n     */\\n    function pause() external only(PAUSER_ROLE) {\\n        _paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Unpause this contract\\n     */\\n    function unpause() external only(PAUSER_ROLE) {\\n        _paused = false;\\n        emit Unpause();\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(\\n            value\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\\n// File: contracts/lib/Administrable/Rescuable.sol\\n\\npragma solidity 0.6.12;\\n\\nabstract contract Rescuable is AccessControlMixin {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant RESCUER_ROLE = keccak256(\\\"RESCUER_ROLE\\\");\\n\\n    event RescuerChanged(address indexed newRescuer);\\n\\n    /**\\n     * @notice Return the members of the rescuer role\\n     * @return Addresses\\n     */\\n    function rescuers() external view returns (address[] memory) {\\n        uint256 count = getRoleMemberCount(RESCUER_ROLE);\\n        address[] memory list = new address[](count);\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            list[i] = getRoleMember(RESCUER_ROLE, i);\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @notice Rescue ERC20 tokens locked up in this contract.\\n     * @param tokenContract ERC20 token contract address\\n     * @param to        Recipient address\\n     * @param amount    Amount to withdraw\\n     */\\n    function rescueERC20(\\n        IERC20 tokenContract,\\n        address to,\\n        uint256 amount\\n    ) external only(RESCUER_ROLE) {\\n        tokenContract.safeTransfer(to, amount);\\n    }\\n}\\n\\n// File: contracts/UChildAdministrableERC20.sol\\n\\npragma solidity 0.6.12;\\n\\ncontract UChildAdministrableERC20 is\\n    UChildERC20,\\n    Blacklistable,\\n    Pausable,\\n    Rescuable\\n{\\n    function _msgSender()\\n        internal\\n        override(Context, UChildERC20)\\n        view\\n        returns (address payable sender)\\n    {\\n        return ContextMixin.msgSender();\\n    }\\n\\n    function withdraw(uint256 amount)\\n        external\\n        override\\n        notBlacklisted(_msgSender())\\n    {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(recipient)\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(sender)\\n        notBlacklisted(recipient)\\n        returns (bool)\\n    {\\n        _transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _increaseAllowance(_msgSender(), spender, addedValue);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(_msgSender())\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        _decreaseAllowance(_msgSender(), spender, subtractedValue);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _transferWithAuthorization(\\n            from,\\n            to,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function approveWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _approveWithAuthorization(\\n            owner,\\n            spender,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function increaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 increment,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _increaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            increment,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function decreaseAllowanceWithAuthorization(\\n        address owner,\\n        address spender,\\n        uint256 decrement,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(owner)\\n        notBlacklisted(spender)\\n    {\\n        _decreaseAllowanceWithAuthorization(\\n            owner,\\n            spender,\\n            decrement,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function withdrawWithAuthorization(\\n        address owner,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused notBlacklisted(owner) {\\n        _withdrawWithAuthorization(\\n            owner,\\n            value,\\n            validAfter,\\n            validBefore,\\n            nonce,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    function cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused {\\n        _cancelAuthorization(authorizer, nonce, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xc0d9bb7d8cc4fb15ee7afa94f5f45bebf02dab34d895108b33f8c0a75d2a014d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103815760003560e01c80639010d07c116101d1578063d505accf11610102578063e63ab1e9116100a0578063f515e6f21161006f578063f515e6f214611079578063f9f92be41461108e578063fa2c322d146110c1578063fe575a87146110d657610381565b8063e63ab1e914610fe0578063e8d6fc4714610ff5578063e94a01021461100a578063eccec5a81461106457610381565b8063dd62ed3e116100dc578063dd62ed3e14610df0578063de7ea79d14610e2b578063e1560fd314610f08578063e3ee160e14610f7457610381565b8063d505accf14610d44578063d547741f14610da2578063d916948714610ddb57610381565b8063a9059cbb1161016f578063c237108f11610149578063c237108f14610c0e578063c7b84f8d14610c7a578063ca15c87314610c8f578063cf2c52cb14610cb957610381565b8063a9059cbb14610b26578063b008609514610b5f578063b2118a8d14610bcb57610381565b8063a0cc6a68116101ab578063a0cc6a6814610aae578063a217fddf14610ac3578063a3b0b5a314610ad8578063a457c2d714610aed57610381565b80639010d07c14610a1457806391d1485414610a6057806395d89b4114610a9957610381565b8063313ce567116102b65780635a049a70116102545780637b766e5f116102235780637b766e5f146109565780637cfa1cfa146109b75780637ecebe00146109cc5780638456cb59146109ff57610381565b80635a049a70146108ab5780635c975abb146108f957806370a082311461090e578063713725441461094157610381565b80633950935111610290578063395093511461077d5780633f4ba83a146107b65780634b71f5c3146107cb57806356ce0e6c146107e057610381565b8063313ce567146107045780633644e5151461072f57806336568abe1461074457610381565b80631a89526611610323578063248a9ca3116102fd578063248a9ca3146106625780632e1a7d4d1461068c5780632f2ff15d146106b657806330adf81f146106ef57610381565b80631a895266146105d55780632004d2911461060a57806323b872dd1461061f57610381565b8063100a15601161035f578063100a15601461051f57806310c8b40414610584578063158ef93e146105ab57806318160ddd146105c057610381565b806306fdde0314610386578063095ea7b3146104105780630c53c51c1461045d575b600080fd5b34801561039257600080fd5b5061039b611109565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d55781810151838201526020016103bd565b50505050905090810190601f1680156104025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561041c57600080fd5b506104496004803603604081101561043357600080fd5b506001600160a01b0381351690602001356111a0565b604080519115158252519081900360200190f35b61039b600480360360a081101561047357600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561049d57600080fd5b8201836020820111156104af57600080fd5b803590602001918460018302840111600160201b831117156104d057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550508235935050506020810135906040013560ff166112c5565b34801561052b57600080fd5b5061053461158d565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610570578181015183820152602001610558565b505050509050019250505060405180910390f35b34801561059057600080fd5b50610599611646565b60408051918252519081900360200190f35b3480156105b757600080fd5b5061044961166a565b3480156105cc57600080fd5b50610599611673565b3480156105e157600080fd5b50610608600480360360208110156105f857600080fd5b50356001600160a01b0316611679565b005b34801561061657600080fd5b50610599611784565b34801561062b57600080fd5b506104496004803603606081101561064257600080fd5b506001600160a01b038135811691602081013590911690604001356117a8565b34801561066e57600080fd5b506105996004803603602081101561068557600080fd5b5035611922565b34801561069857600080fd5b50610608600480360360208110156106af57600080fd5b5035611937565b3480156106c257600080fd5b50610608600480360360408110156106d957600080fd5b50803590602001356001600160a01b03166119ac565b3480156106fb57600080fd5b50610599611a0f565b34801561071057600080fd5b50610719611a33565b6040805160ff9092168252519081900360200190f35b34801561073b57600080fd5b50610599611a3c565b34801561075057600080fd5b506106086004803603604081101561076757600080fd5b50803590602001356001600160a01b0316611a42565b34801561078957600080fd5b50610449600480360360408110156107a057600080fd5b506001600160a01b038135169060200135611aa3565b3480156107c257600080fd5b50610608611bbd565b3480156107d757600080fd5b50610599611c75565b3480156107ec57600080fd5b506106086004803603604081101561080357600080fd5b810190602081018135600160201b81111561081d57600080fd5b82018360208201111561082f57600080fd5b803590602001918460018302840111600160201b8311171561085057600080fd5b919390929091602081019035600160201b81111561086d57600080fd5b82018360208201111561087f57600080fd5b803590602001918460018302840111600160201b831117156108a057600080fd5b509092509050611c99565b3480156108b757600080fd5b50610608600480360360a08110156108ce57600080fd5b506001600160a01b038135169060208101359060ff6040820135169060608101359060800135611deb565b34801561090557600080fd5b50610449611e43565b34801561091a57600080fd5b506105996004803603602081101561093157600080fd5b50356001600160a01b0316611e4c565b34801561094d57600080fd5b50610599611e67565b34801561096257600080fd5b50610608600480360361010081101561097a57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060ff60a0820135169060c08101359060e00135611e79565b3480156109c357600080fd5b50610534611f39565b3480156109d857600080fd5b50610599600480360360208110156109ef57600080fd5b50356001600160a01b0316611feb565b348015610a0b57600080fd5b50610608612006565b348015610a2057600080fd5b50610a4460048036036040811015610a3757600080fd5b50803590602001356120c1565b604080516001600160a01b039092168252519081900360200190f35b348015610a6c57600080fd5b5061044960048036036040811015610a8357600080fd5b50803590602001356001600160a01b03166120e2565b348015610aa557600080fd5b5061039b6120fa565b348015610aba57600080fd5b5061059961215b565b348015610acf57600080fd5b5061059961217f565b348015610ae457600080fd5b50610599612184565b348015610af957600080fd5b5061044960048036036040811015610b1057600080fd5b506001600160a01b0381351690602001356121a8565b348015610b3257600080fd5b5061044960048036036040811015610b4957600080fd5b506001600160a01b0381351690602001356122c2565b348015610b6b57600080fd5b506106086004803603610120811015610b8357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060ff60c0820135169060e08101359061010001356123dc565b348015610bd757600080fd5b5061060860048036036060811015610bee57600080fd5b506001600160a01b038135811691602081013590911690604001356124f9565b348015610c1a57600080fd5b506106086004803603610120811015610c3257600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060ff60c0820135169060e0810135906101000135612595565b348015610c8657600080fd5b506105996126a5565b348015610c9b57600080fd5b5061059960048036036020811015610cb257600080fd5b50356126c9565b348015610cc557600080fd5b5061060860048036036040811015610cdc57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610d0657600080fd5b820183602082011115610d1857600080fd5b803590602001918460018302840111600160201b83111715610d3957600080fd5b5090925090506126e0565b348015610d5057600080fd5b50610608600480360360e0811015610d6757600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135612794565b348015610dae57600080fd5b5061060860048036036040811015610dc557600080fd5b50803590602001356001600160a01b03166128a2565b348015610de757600080fd5b506105996128fb565b348015610dfc57600080fd5b5061059960048036036040811015610e1357600080fd5b506001600160a01b038135811691602001351661291f565b348015610e3757600080fd5b5061060860048036036080811015610e4e57600080fd5b810190602081018135600160201b811115610e6857600080fd5b820183602082011115610e7a57600080fd5b803590602001918460018302840111600160201b83111715610e9b57600080fd5b919390929091602081019035600160201b811115610eb857600080fd5b820183602082011115610eca57600080fd5b803590602001918460018302840111600160201b83111715610eeb57600080fd5b9193509150803560ff1690602001356001600160a01b031661294a565b348015610f1457600080fd5b506106086004803603610120811015610f2c57600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060ff60c0820135169060e0810135906101000135612acb565b348015610f8057600080fd5b506106086004803603610120811015610f9857600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060ff60c0820135169060e0810135906101000135612bdb565b348015610fec57600080fd5b50610599612ceb565b34801561100157600080fd5b50610534612cfd565b34801561101657600080fd5b506110436004803603604081101561102d57600080fd5b506001600160a01b038135169060200135612daf565b6040518082600281111561105357fe5b815260200191505060405180910390f35b34801561107057600080fd5b5061039b612dda565b34801561108557600080fd5b50610599612df7565b34801561109a57600080fd5b50610608600480360360208110156110b157600080fd5b50356001600160a01b0316612e09565b3480156110cd57600080fd5b50610599612ed8565b3480156110e257600080fd5b50610449600480360360208110156110f957600080fd5b50356001600160a01b0316612efc565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156111955780601f1061116a57610100808354040283529160200191611195565b820191906000526020600020905b81548152906001019060200180831161117857829003601f168201915b505050505090505b90565b600d5460009060ff16156111ee576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6111f6612f1a565b6001600160a01b0381166000908152600c602052604090205460ff161561124e5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0384166000908152600c6020526040902054849060ff16156112a85760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6112ba6112b3612f1a565b8686612f29565b506001949350505050565b60606112cf614802565b50604080516060810182526001600160a01b0388166000818152600a60209081529084902080546001810190915583528201529081018690526113158782878787613015565b6113505760405162461bcd60e51b8152600401808060200182810382526021815260200180614afb6021913960400191505060405180910390fd5b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b87338860405180846001600160a01b03168152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113cf5781810151838201526020016113b7565b50505050905090810190601f1680156113fc5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a160006060306001600160a01b0316888a6040516020018083805190602001908083835b6020831061144d5780518252601f19909201916020918201910161142e565b6001836020036101000a038019825116818451168082178552505050505050905001826001600160a01b031660601b8152601401925050506040516020818303038152906040526040518082805190602001908083835b602083106114c35780518252601f1990920191602091820191016114a4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611525576040519150601f19603f3d011682016040523d82523d6000602084013e61152a565b606091505b509150915081611581576040805162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c00000000604482015290519081900360640190fd5b98975050505050505050565b606060006115a86000805160206149058339815191526126c9565b905060608167ffffffffffffffff811180156115c357600080fd5b506040519080825280602002602001820160405280156115ed578160200160208202803683370190505b50905060005b8281101561163f57611613600080516020614905833981519152826120c1565b82828151811061161f57fe5b6001600160a01b03909216602092830291909101909101526001016115f3565b5091505090565b7f808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c81565b60085460ff1690565b60025490565b600080516020614b1c83398151915261169981611694612f1a565b6120e2565b6007906117395760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561172a5780601f106116ff5761010080835404028352916020019161172a565b820191906000526020600020905b81548152906001019060200180831161170d57829003601f168201915b50509250505060405180910390fd5b506001600160a01b0382166000818152600c6020526040808220805460ff19169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a25050565b7f6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f981565b600d5460009060ff16156117f6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6117fe612f1a565b6001600160a01b0381166000908152600c602052604090205460ff16156118565760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0385166000908152600c6020526040902054859060ff16156118b05760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0385166000908152600c6020526040902054859060ff161561190a5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b611915878787613105565b5060019695505050505050565b60009081526006602052604090206002015490565b61193f612f1a565b6001600160a01b0381166000908152600c602052604090205460ff16156119975760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6119a86119a2612f1a565b83613185565b5050565b6000828152600660205260409020600201546119ca90611694612f1a565b611a055760405162461bcd60e51b815260040180806020018281038252602f815260200180614925602f913960400191505060405180910390fd5b6119a88282613281565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b60095481565b611a4a612f1a565b6001600160a01b0316816001600160a01b031614611a995760405162461bcd60e51b815260040180806020018281038252602f815260200180614c6e602f913960400191505060405180910390fd5b6119a882826132ea565b600d5460009060ff1615611af1576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b611af9612f1a565b6001600160a01b0381166000908152600c602052604090205460ff1615611b515760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0384166000908152600c6020526040902054849060ff1615611bab5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6112ba611bb6612f1a565b8686613353565b600080516020614adb833981519152611bd881611694612f1a565b600790611c3e5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561172a5780601f106116ff5761010080835404028352916020019161172a565b50600d805460ff191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a150565b7fb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d881565b6000611ca781611694612f1a565b600790611d0d5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561172a5780601f106116ff5761010080835404028352916020019161172a565b50611d4d85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061338b92505050565b611d8c83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061339e92505050565b611de485858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260018152603160f81b602082015291506133b19050565b5050505050565b600d5460ff1615611e36576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b611de485858585856133c2565b600d5460ff1690565b6001600160a01b031660009081526020819052604090205490565b60008051602061490583398151915281565b600d5460ff1615611ec4576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b0388166000908152600c6020526040902054889060ff1615611f1e5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b611f2e89898989898989896134d6565b505050505050505050565b60606000611f54600080516020614b1c8339815191526126c9565b905060608167ffffffffffffffff81118015611f6f57600080fd5b50604051908082528060200260200182016040528015611f99578160200160208202803683370190505b50905060005b8281101561163f57611fbf600080516020614b1c833981519152826120c1565b828281518110611fcb57fe5b6001600160a01b0390921660209283029190910190910152600101611f9f565b6001600160a01b03166000908152600a602052604090205490565b600080516020614adb83398151915261202181611694612f1a565b6007906120875760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561172a5780601f106116ff5761010080835404028352916020019161172a565b50600d805460ff191660011790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a150565b60008281526006602052604081206120d990836135b7565b90505b92915050565b60008281526006602052604081206120d990836135c3565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156111955780601f1061116a57610100808354040283529160200191611195565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b600081565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b600d5460009060ff16156121f6576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6121fe612f1a565b6001600160a01b0381166000908152600c602052604090205460ff16156122565760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0384166000908152600c6020526040902054849060ff16156122b05760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6112ba6122bb612f1a565b86866135d8565b600d5460009060ff1615612310576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b612318612f1a565b6001600160a01b0381166000908152600c602052604090205460ff16156123705760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0384166000908152600c6020526040902054849060ff16156123ca5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6112ba6123d5612f1a565b8686613627565b600d5460ff1615612427576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b0389166000908152600c6020526040902054899060ff16156124815760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0389166000908152600c6020526040902054899060ff16156124db5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6124ec8b8b8b8b8b8b8b8b8b613782565b5050505050505050505050565b60008051602061490583398151915261251481611694612f1a565b60079061257a5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561172a5780601f106116ff5761010080835404028352916020019161172a565b5061258f6001600160a01b038516848461387a565b50505050565b600d5460ff16156125e0576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b0389166000908152600c6020526040902054899060ff161561263a5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0389166000908152600c6020526040902054899060ff16156126945760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6124ec8b8b8b8b8b8b8b8b8b6138cc565b7f424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a81565b60008181526006602052604081206120dc906139b8565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a961270d81611694612f1a565b6007906127735760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561172a5780601f106116ff5761010080835404028352916020019161172a565b5060008383602081101561278657600080fd5b50359050611de485826139c3565b600d5460ff16156127df576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b0387166000908152600c6020526040902054879060ff16156128395760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0387166000908152600c6020526040902054879060ff16156128935760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b611f2e89898989898989613ab3565b6000828152600660205260409020600201546128c090611694612f1a565b611a995760405162461bcd60e51b8152600401808060200182810382526030815260200180614a3d6030913960400191505060405180910390fd5b7f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60085460ff161561295a57600080fd5b61299986868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061338b92505050565b6129d884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061339e92505050565b6129e182613c63565b612a22848460405160200180806410da1a5b1960da1b8152506005018383808284378083019250505092505050604051602081830303815290604052613c79565b612a346000612a2f612f1a565b611a05565b612a5e7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a982611a05565b612ab686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805180820190915260018152603160f81b602082015291506133b19050565b50506008805460ff1916600117905550505050565b600d5460ff1615612b16576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b0389166000908152600c6020526040902054899060ff1615612b705760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0389166000908152600c6020526040902054899060ff1615612bca5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6124ec8b8b8b8b8b8b8b8b8b613d17565b600d5460ff1615612c26576040805162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015290519081900360640190fd5b6001600160a01b0389166000908152600c6020526040902054899060ff1615612c805760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6001600160a01b0389166000908152600c6020526040902054899060ff1615612cda5760405162461bcd60e51b8152600401808060200182810382526025815260200180614c246025913960400191505060405180910390fd5b6124ec8b8b8b8b8b8b8b8b8b613e03565b600080516020614adb83398151915281565b60606000612d18600080516020614adb8339815191526126c9565b905060608167ffffffffffffffff81118015612d3357600080fd5b50604051908082528060200260200182016040528015612d5d578160200160208202803683370190505b50905060005b8281101561163f57612d83600080516020614adb833981519152826120c1565b828281518110612d8f57fe5b6001600160a01b0390921660209283029190910190910152600101612d63565b6001600160a01b03919091166000908152600b60209081526040808320938352929052205460ff1690565b604051806040016040528060018152602001603160f81b81525081565b600080516020614b1c83398151915281565b600080516020614b1c833981519152612e2481611694612f1a565b600790612e8a5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561172a5780601f106116ff5761010080835404028352916020019161172a565b506001600160a01b0382166000818152600c6020526040808220805460ff19166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a25050565b7f23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e65381565b6001600160a01b03166000908152600c602052604090205460ff1690565b6000612f24613eef565b905090565b6001600160a01b038316612f6e5760405162461bcd60e51b8152600401808060200182810382526024815260200180614bb06024913960400191505060405180910390fd5b6001600160a01b038216612fb35760405162461bcd60e51b815260040180806020018281038252602281526020018061499c6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60006001600160a01b03861661305c5760405162461bcd60e51b8152600401808060200182810382526025815260200180614a6d6025913960400191505060405180910390fd5b60607f23d10def3caacba2e4042e0c75d44a42d2558aabcf5ce951d0642a8032e1e65360001b8660000151876020015188604001518051906020012060405160200180858152602001848152602001836001600160a01b031681526020018281526020019450505050506040516020818303038152906040529050866001600160a01b03166130f060095485888886613f4c565b6001600160a01b031614979650505050505050565b613110838383613627565b6131808361311c612f1a565b61317b84604051806060016040528060288152602001614ab3602891396001600160a01b03891660009081526001602052604081209061315a612f1a565b6001600160a01b031681526020810191909152604001600020549190613fa3565b612f29565b505050565b6001600160a01b0382166131ca5760405162461bcd60e51b8152600401808060200182810382526021815260200180614b3c6021913960400191505060405180910390fd5b6131d682600083613180565b61321381604051806060016040528060228152602001614954602291396001600160a01b0385166000908152602081905260409020549190613fa3565b6001600160a01b038316600090815260208190526040902055600254613239908261403a565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000828152600660205260409020613299908261407c565b156119a8576132a6612f1a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602052604090206133029082614091565b156119a85761330f612f1a565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6001600160a01b03808416600090815260016020908152604080832093861683529290522054613180908490849061317b90856140a6565b80516119a890600390602084019061482c565b80516119a890600490602084019061482c565b6133bb8282614100565b6009555050565b6133cc8585614172565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b03871681830181905260608281018890528351808403909101815260809092019092526009549091906134339086868686613f4c565b6001600160a01b0316146134785760405162461bcd60e51b8152600401808060200182810382526021815260200180614a926021913960400191505060405180910390fd5b6001600160a01b0386166000818152600b60209081526040808320898452909152808220805460ff19166002179055518792917f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8191a3505050505050565b6134e2888588886141e0565b604080517f6c8f8f5f82f0c140edd12e80d10ff715a36d6e5f73e406394862b5f1eb44c4f960208201526001600160a01b038a16818301819052606082018a90526080820189905260a0820188905260c08083018890528351808403909101815260e090920190925260095490919061355e9086868686613f4c565b6001600160a01b0316146135a35760405162461bcd60e51b8152600401808060200182810382526021815260200180614a926021913960400191505060405180910390fd5b6135ad8986614266565b611f2e8989613185565b60006120d983836142c0565b60006120d9836001600160a01b038416614324565b613180838361317b84604051806060016040528060258152602001614c49602591396001600160a01b03808a166000908152600160209081526040808320938c16835292905220549190613fa3565b6001600160a01b03831661366c5760405162461bcd60e51b8152600401808060200182810382526025815260200180614b5d6025913960400191505060405180910390fd5b6001600160a01b0382166136b15760405162461bcd60e51b81526004018080602001828103825260238152602001806148e26023913960400191505060405180910390fd5b6136bc838383613180565b6136f9816040518060600160405280602681526020016149ef602691396001600160a01b0386166000908152602081905260409020549190613fa3565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461372890826140a6565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b61378e898588886141e0565b604080517fb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d860208201526001600160a01b03808c16828401819052908b166060830152608082018a905260a0820189905260c0820188905260e0808301889052835180840390910181526101009092019092526009549091906138149086868686613f4c565b6001600160a01b0316146138595760405162461bcd60e51b8152600401808060200182810382526021815260200180614a926021913960400191505060405180910390fd5b6138638a86614266565b61386e8a8a8a6135d8565b50505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261318090849061433c565b6138d8898588886141e0565b604080517f424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a60208201526001600160a01b03808c16828401819052908b166060830152608082018a905260a0820189905260c0820188905260e08083018890528351808403909101815261010090920190925260095490919061395e9086868686613f4c565b6001600160a01b0316146139a35760405162461bcd60e51b8152600401808060200182810382526021815260200180614a926021913960400191505060405180910390fd5b6139ad8a86614266565b61386e8a8a8a613353565b60006120dc826143ed565b6001600160a01b038216613a1e576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b613a2a60008383613180565b600254613a3790826140a6565b6002556001600160a01b038216600090815260208190526040902054613a5d90826140a6565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b33301415613b08576040805162461bcd60e51b815260206004820152601760248201527f43616c6c6572206973207468697320636f6e7472616374000000000000000000604482015290519081900360640190fd5b42841015613b5d576040805162461bcd60e51b815260206004820152601960248201527f5065726d69743a207065726d6974206973206578706972656400000000000000604482015290519081900360640190fd5b6001600160a01b038088166000818152600a602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c992810192909252818301849052938a1660608201526080810189905260a081019390935260c08084018890528151808503909101815260e09093019052600954613bf39086868686613f4c565b6001600160a01b031614613c4e576040805162461bcd60e51b815260206004820152601960248201527f5065726d69743a20696e76616c6964207369676e617475726500000000000000604482015290519081900360640190fd5b613c59888888612f29565b5050505050505050565b6005805460ff191660ff92909216919091179055565b806040516020018082805190602001908083835b60208310613cac5780518252601f199092019160209182019101613c8d565b51815160209384036101000a60001901801990921691161790527f3a20494e53554646494349454e545f5045524d495353494f4e530000000000009190930190815260408051808303600519018152601a909201905280516119a8955060079450920191905061482c565b613d23898588886141e0565b604080517f808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c60208201526001600160a01b03808c16828401819052908b166060830152608082018a905260a0820189905260c0820188905260e080830188905283518084039091018152610100909201909252600954909190613da99086868686613f4c565b6001600160a01b031614613dee5760405162461bcd60e51b8152600401808060200182810382526021815260200180614a926021913960400191505060405180910390fd5b613df88a86614266565b61386e8a8a8a612f29565b613e0f898588886141e0565b604080517f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760208201526001600160a01b03808c16828401819052908b166060830152608082018a905260a0820189905260c0820188905260e080830188905283518084039091018152610100909201909252600954909190613e959086868686613f4c565b6001600160a01b031614613eda5760405162461bcd60e51b8152600401808060200182810382526021815260200180614a926021913960400191505060405180910390fd5b613ee48a86614266565b61386e8a8a8a613627565b600033301415613f475760606000368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b0316915061119d9050565b503390565b80516020808301919091206040805161190160f01b81850152602281018990526042808201939093528151808203909301835260620190528051910120600090613f98818787876143f1565b979650505050505050565b600081848411156140325760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613ff7578181015183820152602001613fdf565b50505050905090810190601f1680156140245780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60006120d983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250613fa3565b60006120d9836001600160a01b038416614575565b60006120d9836001600160a01b0384166145bf565b6000828201838110156120d9576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b8151602092830120815191830191909120604080517f36c25de3e541d5d970f66e4210d728721220fff5c077cc6cd008b3a0c62adab7818601528082019390935260608301919091523060808301524660a0808401919091528151808403909101815260c09092019052805191012090565b6001600160a01b0382166000908152600b6020908152604080832084845290915281205460ff1660028111156141a457fe5b146119a85760405162461bcd60e51b81526004018080602001828103825260318152602001806149be6031913960400191505060405180910390fd5b81421161421e5760405162461bcd60e51b815260040180806020018281038252602e815260200180614b82602e913960400191505060405180910390fd5b80421061425c5760405162461bcd60e51b8152600401808060200182810382526028815260200180614a156028913960400191505060405180910390fd5b61258f8484614172565b6001600160a01b0382166000818152600b60209081526040808320858452909152808220805460ff19166001179055518392917f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a591a35050565b815460009082106143025760405162461bcd60e51b81526004018080602001828103825260228152602001806148c06022913960400191505060405180910390fd5b82600001828154811061431157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b6060614391826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146859092919063ffffffff16565b805190915015613180578080602001905160208110156143b057600080fd5b50516131805760405162461bcd60e51b815260040180806020018281038252602a815260200180614bfa602a913960400191505060405180910390fd5b5490565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156144525760405162461bcd60e51b8152600401808060200182810382526026815260200180614bd46026913960400191505060405180910390fd5b8360ff16601b1415801561446a57508360ff16601c14155b156144a65760405162461bcd60e51b81526004018080602001828103825260268152602001806149766026913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015614502573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661456a576040805162461bcd60e51b815260206004820152601c60248201527f45435265636f7665723a20696e76616c6964207369676e617475726500000000604482015290519081900360640190fd5b90505b949350505050565b60006145818383614324565b6145b7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556120dc565b5060006120dc565b6000818152600183016020526040812054801561467b57835460001980830191908101906000908790839081106145f257fe5b906000526020600020015490508087600001848154811061460f57fe5b60009182526020808320909101929092558281526001898101909252604090209084019055865487908061463f57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506120dc565b60009150506120dc565b606061456d8484600085606061469a856147fc565b6146eb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061472a5780518252601f19909201916020918201910161470b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461478c576040519150601f19603f3d011682016040523d82523d6000602084013e614791565b606091505b509150915081156147a557915061456d9050565b8051156147b55780518082602001fd5b60405162461bcd60e51b8152602060048201818152865160248401528651879391928392604401919085019080838360008315613ff7578181015183820152602001613fdf565b3b151590565b60405180606001604052806000815260200160006001600160a01b03168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061486d57805160ff191683800117855561489a565b8280016001018555821561489a579182015b8281111561489a57825182559160200191906001019061487f565b506148a69291506148aa565b5090565b5b808211156148a657600081556001016148ab56fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345524332303a207472616e7366657220746f20746865207a65726f2061646472657373cf6f9f892731e14b8859835f2ff35575f447fb501f46243c4eb8bac19e31a050416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e7445524332303a206275726e20616d6f756e7420657863656564732062616c616e636545435265636f7665723a20696e76616c6964207369676e6174757265202776272076616c756545524332303a20617070726f766520746f20746865207a65726f20616464726573734761734162737472616374696f6e3a20617574686f72697a6174696f6e2069732075736564206f722063616e63656c656445524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e63654761734162737472616374696f6e3a20617574686f72697a6174696f6e2069732065787069726564416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b654e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5349474e45524761734162737472616374696f6e3a20696e76616c6964207369676e617475726545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636565d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a5369676e657220616e64207369676e617475726520646f206e6f74206d6174636898db8a220cd0f09badce9f22d0ba7e93edb3d404448cc3560d391ab096ad16e945524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f20616464726573734761734162737472616374696f6e3a20617574686f72697a6174696f6e206973206e6f74207965742076616c696445524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345435265636f7665723a20696e76616c6964207369676e6174757265202773272076616c75655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c697374656445524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a2646970667358221220c70423487474f31cb51740c7248436799b31c02be7aa529973a85419e280929764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount of allowance"
        }
      },
      "authorizationState(address,bytes32)": {
        "params": {
          "authorizer": "Authorizer's address",
          "nonce": "Nonce of the authorization"
        },
        "returns": {
          "_0": "Authorization state"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "blacklist(address)": {
        "details": "Adds an account to the blacklist",
        "params": {
          "account": "The address to blacklist"
        }
      },
      "blacklisters()": {
        "returns": {
          "_0": "Addresses"
        }
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "details": "Works only if the authorization is not yet used.",
        "params": {
          "authorizer": "Authorizer's address",
          "nonce": "Nonce of the authorization",
          "r": "r of the signature",
          "s": "s of the signature",
          "v": "v of the signature"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "decrement": "Amount of decrease in allowance",
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)"
        }
      },
      "deposit(address,bytes)": {
        "details": "Should be callable only by ChildChainManager Should handle deposit by minting the required amount for user Make sure minting is done only by this function",
        "params": {
          "depositData": "abi encoded amount",
          "user": "user address for whom deposit is being done"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "increment": "Amount of increase in allowance",
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)"
        }
      },
      "initialize(string,string,uint8,address)": {
        "details": "meant to be called once immediately after deployment"
      },
      "isBlacklisted(address)": {
        "details": "Checks if an account is blacklisted",
        "params": {
          "account": "The address to check"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "params": {
          "owner": "Token owner's address"
        },
        "returns": {
          "_0": "Next nonce"
        }
      },
      "paused()": {
        "returns": {
          "_0": "True if paused"
        }
      },
      "pausers()": {
        "returns": {
          "_0": "Addresses"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "Expiration time, seconds since the epoch",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "value": "Amount of allowance"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "rescueERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "to": "Recipient address",
          "tokenContract": "ERC20 token contract address"
        }
      },
      "rescuers()": {
        "returns": {
          "_0": "Addresses"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "r of the signature",
          "s": "s of the signature",
          "to": "Payee's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "unBlacklist(address)": {
        "params": {
          "account": "The address to remove from the blacklist"
        }
      },
      "withdraw(uint256)": {
        "details": "Should burn user's tokens. This transaction will be verified when exiting on root chain",
        "params": {
          "amount": "amount of tokens to withdraw"
        }
      },
      "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "nonce": "Unique nonce",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Update allowance with a signed authorization"
      },
      "authorizationState(address,bytes32)": {
        "notice": "Returns the state of an authorization"
      },
      "blacklisters()": {
        "notice": "Return the members of the blacklister role"
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Attempt to cancel an authorization"
      },
      "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Decrease allowance with a signed authorization"
      },
      "deposit(address,bytes)": {
        "notice": "called when token is deposited on root chain"
      },
      "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Increase allowance with a signed authorization"
      },
      "initialize(string,string,uint8,address)": {
        "notice": "Initialize the contract after it has been proxified"
      },
      "nonces(address)": {
        "notice": "Nonces for permit / meta-transactions"
      },
      "pause()": {
        "notice": "Pause this contract"
      },
      "paused()": {
        "notice": "Returns whether this contract is paused"
      },
      "pausers()": {
        "notice": "Return the members of the pauser role"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Update allowance with a signed permit"
      },
      "rescueERC20(address,address,uint256)": {
        "notice": "Rescue ERC20 tokens locked up in this contract."
      },
      "rescuers()": {
        "notice": "Return the members of the rescuer role"
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Execute a transfer with a signed authorization"
      },
      "unBlacklist(address)": {
        "notice": "Removes an account from the blacklist"
      },
      "unpause()": {
        "notice": "Unpause this contract"
      },
      "withdraw(uint256)": {
        "notice": "called when user wants to withdraw tokens back to root chain"
      },
      "withdrawWithAuthorization(address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Execute a withdrawal with a signed authorization. This is used to transfer tokens back to the root chain."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 567,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 573,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 575,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 577,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 579,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 581,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 1549,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1545_storage)"
      },
      {
        "astId": 1814,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_revertMsg",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 1860,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_initialized",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 2035,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 2057,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_nonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2367,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_authorizationStates",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)2360))"
      },
      {
        "astId": 3272,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_blacklisted",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3412,
        "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
        "label": "_paused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(AuthorizationState)2360": {
        "encoding": "inplace",
        "label": "enum GasAbstraction.AuthorizationState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_enum(AuthorizationState)2360))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => enum GasAbstraction.AuthorizationState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_enum(AuthorizationState)2360)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_enum(AuthorizationState)2360)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum GasAbstraction.AuthorizationState)",
        "numberOfBytes": "32",
        "value": "t_enum(AuthorizationState)2360"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1545_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1545_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)1326_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1325,
            "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1146_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)1545_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1542,
            "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)1326_storage"
          },
          {
            "astId": 1544,
            "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1146_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1141,
            "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1145,
            "contract": "contracts/UChildAdministrableERC20.sol:UChildAdministrableERC20",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}